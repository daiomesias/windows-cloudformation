{
  "AWSTemplateFormatVersion" : "2010-09-09",
 "Description" : "Test One Instance",
 "Parameters" : {
 "ImageIDA" : {
  "Type" : "String",
  "Description" : "Image for the instances: windows 2019 ami-0cb8c277ab5436fac, windows 2017 Standard SQL ami-09bd10a0fa6dfcd7b",
  "AllowedValues" : [ "ami-0621c9b6514ba3996" , "ami-0ae9c7dd31b7a495b" ],
  "Default" : "ami-0621c9b6514ba3996"  
 },
 "InstanceType": {
   "Type" : "String",
   "Description": "Instance Type",
   "AllowedValues" : [ "t2.micro", "m5.large" ],
   "Default" : "t2.micro"  
},
"InstanceMin" : {
  "Type": "String",
  "Description": "Number of instances for autoscaling",
  "AllowedValues" : [ "1", "2" ],
  "Default": "1"
  },
  "InstanceMax" : {
    "Type": "String",
    "Description": "Number of instances for autoscaling",
    "AllowedValues" : [ "1", "2", "3"],
    "Default": "1"
    },
"KeyPair" : {
  "Type" : "AWS::EC2::KeyPair::KeyName",
  "Description" : "KeyPair to access" , 
  "AllowedPattern" : ".+",
  "ConstraintDescription" : "KeyPair is mandatory, default PPROP", 
  "Default" : "PPROP"  
  },
"MyVPC": {
  "Description": "Select VPC used by ec2.",
  "Type": "AWS::EC2::VPC::Id"
},
"SubnetA": {
  "Description": "Select 2 subnets used by ec2.",
  "Type": "String",
  "Default" : "subnet-dba566a3"
},
"SubnetB": {
  "Description": "Select  subnets used by ec2.",
  "Type": "String",
  "Default" : "subnet-e811fca2"
},
"Subnets" : {
  "Type" : "List<AWS::EC2::Subnet::Id>",
  "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
  "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud."
},
"AZoneA": {
  "Type": "String",
  "Default": "us-west-2a",
  "Description": "Name of the first availability zone in which the servers will be created."
},

"AZoneB": {
  "Type": "String",
  "Default": "us-west-2b",
  "Description": "Name of the second availability zone in which the servers will be created."
},
"topic1": {
  "ConstraintDescription": "Insert topic arn",
  "Type": "String",
  "Default" : "arn:aws:sns:us-west-2:673501758087:ASGPPROP"
  },
  "ADID": {
  "ConstraintDescription": "Insert Directory ID inside Directory Service ",
  "Type": "String",
  "Default" : "d-9267035651"
  },

  "Domain": {
    "ConstraintDescription": "AD FQDN ",
    "Type": "String",
    "Default" : "corp.permutaprop.com"
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Network parameters"
          },
          "Parameters": [
            "MyVPC",
            "SubnetA",
            "SubnetB",
            "Subnets",
            "AZoneA",
            "AZoneB",
            "SGpermutapropTest",
            "KeyPair",
            "SGLB"
          ]
        },
        {
          "Label": {
            "default": "Directory parameters"
          },
          "Parameters": [
            "SGpermutapropTest",
            "SGLB"
          ]
        }
      ]
    }
  },
"Resources": {  
  "SGpermutapropTest" : {
      "Properties": {
        "GroupDescription": "This is the security group for the test instance",
        "SecurityGroupIngress": [
          {
              "CidrIp": "181.167.0.0/16",
              "FromPort": "3389",
              "IpProtocol": "tcp",
              "ToPort": "3389"
            },
            {
              "CidrIp": "201.213.72.0/24",
              "FromPort": "3389",
              "IpProtocol": "tcp",
              "ToPort": "3389"
            },            
            {
              "CidrIp": "190.18.0.0/16",
              "FromPort": "3389",
              "IpProtocol": "tcp",
              "ToPort": "3389"
            },
            {
              "CidrIp": "181.228.164.94/32",
              "FromPort": "3389",
              "IpProtocol": "tcp",
              "ToPort": "3389"
            },
            {
              "CidrIp": "200.127.62.0/24",
              "FromPort": "3389",
              "IpProtocol": "tcp",
              "ToPort": "3389"
            },
            {
              "CidrIp": "181.28.77.0/24",
              "FromPort": "3389",
              "IpProtocol": "tcp",
              "ToPort": "3389"
            },
            {
              "CidrIp": "181.167.0.0/16",
              "FromPort": "80",
              "IpProtocol": "tcp",
              "ToPort": "80"
            },
            {
              "CidrIp": "201.213.72.0/24",
              "FromPort": "80",
              "IpProtocol": "tcp",
              "ToPort": "80"
            },            
            {
              "CidrIp": "190.18.0.0/16",
              "FromPort": "80",
              "IpProtocol": "tcp",
              "ToPort": "80"
            },
            {
              "CidrIp": "181.228.164.94/32",
              "FromPort": "80",
              "IpProtocol": "tcp",
              "ToPort": "80"
            },
            {
              "CidrIp": "200.127.62.0/24",
              "FromPort": "80",
              "IpProtocol": "tcp",
              "ToPort": "80"
            },
            {
              "CidrIp": "181.28.77.0/24",
              "FromPort": "80",
              "IpProtocol": "tcp",
              "ToPort": "80"
            },
            {
              "CidrIp": "172.31.0.0/16",
              "FromPort": "80",
              "IpProtocol": "tcp",
              "ToPort": "80"
            },
             {
              "CidrIp": "201.213.72.0/24",
              "FromPort": "443",
              "IpProtocol": "tcp",
              "ToPort": "443"
            },            {
              "CidrIp": "190.18.0.0/16",
              "FromPort": "443",
              "IpProtocol": "tcp",
              "ToPort": "443"
            },
            {
              "CidrIp": "181.228.164.94/32",
              "FromPort": "443",
              "IpProtocol": "tcp",
              "ToPort": "443"
            },
            {
              "CidrIp": "200.127.62.0/24",
              "FromPort": "443",
              "IpProtocol": "tcp",
              "ToPort": "443"
            },
            {
              "CidrIp": "181.28.77.0/24",
              "FromPort": "443",
              "IpProtocol": "tcp",
              "ToPort": "443"
            },
            {
              "CidrIp": "181.167.0.0/16",
              "FromPort": "21000",
              "IpProtocol": "tcp",
              "ToPort": "21000"
            },
            {
              "CidrIp": "201.213.72.0/24",
              "FromPort": "21000",
              "IpProtocol": "tcp",
              "ToPort": "21000"
            },            {
              "CidrIp": "190.18.0.0/16",
              "FromPort": "21000",
              "IpProtocol": "tcp",
              "ToPort": "21000"
            },
            {
              "CidrIp": "181.228.164.94/32",
              "FromPort": "21000",
              "IpProtocol": "tcp",
              "ToPort": "21000"
            },
            {
              "CidrIp": "200.127.62.0/24",
              "FromPort": "21000",
              "IpProtocol": "tcp",
              "ToPort": "21000"
            },
            {
              "CidrIp": "181.28.77.0/24",
              "FromPort": "21000",
              "IpProtocol": "tcp",
              "ToPort": "21000"
            },
          {
            "CidrIp": "172.31.0.0/16",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "172.31.0.0/16",
            "FromPort": "0",
            "IpProtocol": "udp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "172.31.0.0/16",
            "FromPort": "-1",
            "IpProtocol": "icmp",
            "ToPort": "-1"
          }
        ], 
        "SecurityGroupEgress": [
          {
            "CidrIp": "172.31.0.0/16",
            "FromPort": "-1",
            "IpProtocol": "icmp",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          },
          {
            "CidrIp": "172.31.0.0/16",
            "FromPort": "2100",
            "IpProtocol": "tcp",
            "ToPort": "21000"
          },
          {
            "CidrIp": "172.31.0.0/16",
            "FromPort": "3306",
            "IpProtocol": "tcp",
            "ToPort": "3306"
          },
          {
            "CidrIp": "172.31.0.0/16",
            "FromPort": "1433",
            "IpProtocol": "tcp",
            "ToPort": "1433"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "SGpermutapropTest"
          }
        ],
        "VpcId": {
          "Ref": "MyVPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
  },


  "SGLB" : {
    "Properties": {
      "GroupDescription": "This is the security group for LB",
      "SecurityGroupIngress": [
        {
          "CidrIp": "0.0.0.0/0",
          "FromPort": "80",
          "IpProtocol": "tcp",
          "ToPort": "80"
        },        
        {
          "CidrIp": "0.0.0.0/0",
          "FromPort": "443",
          "IpProtocol": "tcp",
          "ToPort": "443"
        }
      ], 
      "SecurityGroupEgress": [
        {
          "CidrIp": "0.0.0.0/0",
          "FromPort": "80",
          "IpProtocol": "tcp",
          "ToPort": "80"
        },
        {
          "CidrIp": "0.0.0.0/0",
          "FromPort": "443",
          "IpProtocol": "tcp",
          "ToPort": "443"
        }
      ],
      "Tags": [
        {
          "Key": "Name",
          "Value": "SGLB"
        }
      ],
      "VpcId": {
        "Ref": "MyVPC"
      }
    },
    "Type": "AWS::EC2::SecurityGroup"
},



  "EC2Instance": {
    "Type": "AWS::AutoScaling::LaunchConfiguration",
    "Properties": {
      "InstanceType" : { "Ref" : "InstanceType" },
      "IamInstanceProfile"  : { "Ref" : "Ec2Role" },
      "KeyName" : { "Ref" : "KeyPair" },
      "ImageId" : { "Ref" : "ImageIDA" },
      "InstanceMonitoring": true,
      "UserData": {
        "Fn::Base64": {
          "Fn::Join": [
            "",
            [
              "<powershell>\n",
              "$domain = 'corp.permutaprop.com'\n",
              "$password = (Get-SSMParameterValue -Name ADPassword -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force \n",
              "$user = 'Admin'",
              "$credential = New-Object System.Management.Automation.PSCredential($user, $password) \n",
              "name = invoke-restmethod -uri http://169.254.169.254/latest/meta-data/instance-id \n",
              "Add-Computer -DomainName '$domain' -Credential $credential -Passthru -Verbose -Force -Restart \n",
              "</powershell>\n"    
             ]
            ]
          }
        }
      }
    },

     "Ec2Role": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": ["EC2DomainJoin"]
      }
    },

    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",  
      "Properties": {
        "AvailabilityZones" : [{ "Ref" : "AZoneA"}, { "Ref" : "AZoneB"}],
        "LaunchConfigurationName": { "Ref" : "EC2Instance" },
        "MinSize": { "Ref": "InstanceMin" },
        "MaxSize": { "Ref": "InstanceMax" },
        "VPCZoneIdentifier" :  { "Ref" : "Subnets" },
        "TargetGroupARNs": [ { "Ref": "ALBTargetGroup" } ],
        "Cooldown": "300",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "600",
        "DesiredCapacity":  { "Ref": "InstanceMin" },
        "NotificationConfigurations" : [
          {
            "TopicARN" : { "Ref" : "topic1" },
            "NotificationTypes" : [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
          }
        ],
				"Tags": [{"Key": "Name", "Value": {"Ref": "AWS::StackName"}, "PropagateAtLaunch" : true}]
			},
				"UpdatePolicy" : {
					"AutoScalingRollingUpdate" : {
						"MinInstancesInService" : "1",
						"MaxBatchSize" : "1",
						"PauseTime" : "PT15M"					
				}
			}
		},

  "ScaleUpPolicy" : {
    "Type" : "AWS::AutoScaling::ScalingPolicy",
    "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
      "Cooldown" : "60",
      "ScalingAdjustment" : "1"
    }
  },

  "ScaleDownPolicy" : {
    "Type" : "AWS::AutoScaling::ScalingPolicy",
    "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
      "Cooldown" : "60",
      "ScalingAdjustment" : "-1"
    }
  },

  "CPUAlarmHigh": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "AlarmDescription": "Scale-up if CPU > 70% for 10 minutes",
      "MetricName": "CPUUtilization",
      "Namespace": "AWS/EC2",
      "Statistic": "Average",
      "Period": "300",
      "EvaluationPeriods": "2",
      "Threshold": "70",
      "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
      "Dimensions": [
                     {
                       "Name": "AutoScalingGroupName",
                       "Value": { "Ref": "AutoScalingGroup" }
                     }
                     ],
                     "ComparisonOperator": "GreaterThanThreshold"
    }
  },
  "CPUAlarmLow": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "AlarmDescription": "Scale-down if CPU < 40% for 10 minutes",
      "MetricName": "CPUUtilization",
      "Namespace": "AWS/EC2",
      "Statistic": "Average",
      "Period": "300",
      "EvaluationPeriods": "2",
      "Threshold": "40",
      "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
      "Dimensions": [
                     {
                       "Name": "AutoScalingGroupName",
                       "Value": { "Ref": "AutoScalingGroup" }
                     }
                     ],
                     "ComparisonOperator": "LessThanThreshold"
    }
  },

  "ApplicationLoadBalancer" : {
    "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
    "Properties" : {
      "Subnets" : { "Ref" : "Subnets"}
    }
  },

  "ALBListener" : {
    "Type" : "AWS::ElasticLoadBalancingV2::Listener",
    "Properties" : {
      "DefaultActions": [
        {
          "Type": "forward",
          "TargetGroupArn": {
            "Ref": "ALBTargetGroup"
          }
        }
      ],
      "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
      "Port" : "80",
      "Protocol" : "HTTP"
    }
  },

  "ALBTargetGroup" : {
    "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
    "Properties" : {
      "HealthCheckIntervalSeconds" : 30,
      "HealthCheckTimeoutSeconds" : 5,
      "HealthyThresholdCount" : 3,
      "Port" : 80,
      "Protocol" : "HTTP",
      "UnhealthyThresholdCount" : 5,
      "VpcId" : {"Ref" : "MyVPC"}
    }
  }
  },
          "Outputs": {
            "InstanceId": {
              "Description": "InstanceId of the newly created EC2 instance",
              "Value":  { "Ref" : "EC2Instance" }
            },
            "ELBID": {
              "Description": "ELB ID",
              "Value":  { "Ref" : "ApplicationLoadBalancer" }
            },
            "ASGID": {
              "Description": "ASG ID",
              "Value":  { "Ref" : "AutoScalingGroup" }
            },
            "URL": {
              "Description": "URL of the website",
              "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "ApplicationLoadBalancer", "DNSName" ] } ] ] }
            }

     }
  }      