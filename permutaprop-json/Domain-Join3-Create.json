{
  "Description": "CloudFormation template to create domain controller for AMI", 
  "Parameters": {
    "KeyName": {
      "MinLength" : 1,  
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "BaseAmiId": {
      "Default": "ami-bd3ba0aa",
      "Type": "String"
    },
    "DomainAdminUser": {
      "Description": "User name for the account that will be added as Domain Administrator. This is separate from the default \"Administrator\" account",
      "Type": "String",
      "Default": "StackAdmin"
    },
    "AdminPassword": {
        "NoEcho": "true",
        "Description" : "The Windows administrator account password",
        "Type": "String",
        "MinLength": "8",
        "MaxLength": "41" 
    },
    "DomainDNSName": {
      "Description": "Fully qualified domain name (FQDN) of the forest root domain",
      "Type": "String",
      "Default": "mydomain.local"
    },
    "DomainNetBiosName": {
      "Description": "Netbios name for the domain",
      "Type": "String",
      "Default": "mydomain"
    }
  },
  "Resources": {

    "BastionHost1": {
      "Properties": {
        "ImageId": {
          "Ref": "BaseAmiId"
        },
        "InstanceType": "t2.large",
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "BastionSecurityGroup"
              }
            ],
            "PrivateIpAddress": "10.1.1.100",
            "SubnetId": {
              "Ref": "PublicSubnetAZ1"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "BastionHost1"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "<powershell>\n",
                "### Change local admin password...\n",
                "([adsi]\"WinNT://$env:computername/Administrator\").SetPassword('",
                {
                  "Ref": "AdminPassword"
                },
                "') \n",
                "</powershell>\n"               
              ]
            ]
          }
        }       
      },
      "Type": "AWS::EC2::Instance"
    },  
    "DC1": {    
      "Type": "AWS::EC2::Instance",
      "DependsOn": "NATRoute",    
      "Metadata": {
        "AWS::CloudFormation::Init": {
            "configSets": {
                "config": [
                  "setup",
                  "rename",
                  "installADDS"
                ]
            },
            "setup": {
                "files": {
                  "c:\\cfn\\scripts\\Set-StaticIP.ps1": {
                    "content": {
                      "Fn::Join": [
                        "",
                        [
                          "$netip = Get-NetIPConfiguration;",
                          "$ipconfig = Get-NetIPAddress | ?{$_.IpAddress -eq $netip.IPv4Address.IpAddress};",
                          "Get-NetAdapter | Set-NetIPInterface -DHCP Disabled;",
                          "Get-NetAdapter | New-NetIPAddress -AddressFamily IPv4 -IPAddress $netip.IPv4Address.IpAddress -PrefixLength $ipconfig.PrefixLength -DefaultGateway $netip.IPv4DefaultGateway.NextHop;",
                          "Get-NetAdapter | Set-DnsClientServerAddress -ServerAddresses $netip.DNSServer.ServerAddresses;",
                          "\n"
                        ]
                      ]
                    }
                  }
                },
                "commands": {
                  "a-disable-win-fw": {
                    "command": {
                      "Fn::Join": [
                        "",
                        [
                          "powershell.exe -Command \"Get-NetFirewallProfile | Set-NetFirewallProfile -Enabled False"
                        ]
                      ]
                    },
                    "waitAfterCompletion": "0"
                  }
                }
            },
            "rename": {
                "commands": {
                  "a-set-static-ip": {
                    "command": {
                      "Fn::Join": [
                        "",
                        [
                          "powershell.exe -ExecutionPolicy RemoteSigned -Command c:\\cfn\\scripts\\Set-StaticIP.ps1"
                        ]
                      ]
                    },
                    "waitAfterCompletion": "15"
                  },
                  "b-run-powershell-RenameComputer-no-reboot": {
                    "command": {
                      "Fn::Join": [
                        "",
                        [
                          "powershell.exe Rename-Computer -NewName DC1 -force -restart"
                        ]
                      ]
                    },
                    "waitAfterCompletion": "forever"
                  }
                }
            },
            "installADDS": {
              "commands": {
                "1-install-prereqs": {
                    "command": {
                      "Fn::Join": [
                        "",
                        [
                          "powershell.exe -Command \"Install-WindowsFeature AD-Domain-Services, rsat-adds -IncludeAllSubFeature"
                        ]
                      ]
                    },
                    "waitAfterCompletion": "0"
                },          
                "2-install-adds": {
                    "command": {
                      "Fn::Join": [
                        "",
                        [
                          "powershell.exe -Command Install-ADDSForest -DomainName ",
                          {
                            "Ref": "DomainDNSName"
                          },
                          " -SafeModeAdministratorPassword (ConvertTo-SecureString '",
                          {
                            "Ref": "AdminPassword"
                          },
                          "' -AsPlainText -Force) -DomainMode Win2012R2 -DomainNetbiosName ",
                          {
                            "Ref": "DomainNetBiosName"
                          },
                          " -ForestMode Win2012R2 -Confirm:$false -Force"
                        ]
                      ]
                    },
                    "waitAfterCompletion": "forever"
                },              
                "3-start-ADWS": {
                    "command": {
                      "Fn::Join": [
                        "",
                        [
                          "powershell.exe -Command $s = Get-Service -Name ADWS; while ($s.Status -ne 'Running'){ Start-Service ADWS; Start-Sleep 3 }"
                        ]
                      ]
                    },
                    "waitAfterCompletion": "30"
                },                  
                "4-create-adminuser": {
                    "command": {
                        "Fn::Join": [
                        "",
                        [
                          "powershell.exe -Command $u = New-ADUser ",
                          {
                            "Ref": "DomainAdminUser"
                          },
                          " -SamAccountName ",
                          {
                            "Ref": "DomainAdminUser"
                          },                  
                          " -UserPrincipalName ",
                          {
                            "Ref": "DomainAdminUser"
                          },
                          "@",
                          {
                            "Ref": "DomainDNSName"
                          },
                          " -AccountPassword (ConvertTo-SecureString '",
                          {
                            "Ref": "AdminPassword"
                          },
                          "' -AsPlainText -Force) -Enabled $true -PasswordNeverExpires $true -PassThru; Add-ADGroupMember -Identity 'domain admins' -Members $u"
                        ]
                      ]
                    },
                    "waitAfterCompletion": "0"
                }               
              }
            }
        }
      },
      "Properties": {
            "BlockDeviceMappings": [
              {
                "DeviceName": "/dev/sda1",
                "Ebs": {
                  "VolumeSize": "40"
                }
              }
            ],
            "ImageId": {
              "Ref": "BaseAmiId"
            },
            "InstanceType": "m4.large",
            "KeyName": {
              "Ref": "KeyName"
            },
            "NetworkInterfaces": [
              {
                "AssociatePublicIpAddress": "false",
                "DeleteOnTermination": "true",
                "DeviceIndex": "0",
                "GroupSet": [
                  {
                    "Ref": "PrivateSecurityGroup"
                  }
                ],
                "PrivateIpAddress": "10.1.3.100",
                "SubnetId": {
                  "Ref": "PrivateSubnetAZ1"
                }
              }
            ],
            "Tags": [
              {
                "Key": "Name",
                "Value": "DC1"
              }
            ],
            "UserData": {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "<script>\n",
                    "cfn-init.exe -v -c config -s ",
                    {
                      "Ref": "AWS::StackId"
                    },
                    " -r DC1",
                    " --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "\n",
                    "</script>\n"
                  ]
                ]
              }
            }
        }
    },
    
    "PrivateSecurityGroup": {
      "Properties": {
        "GroupDescription": "This is the security group for Active Directory",
        "SecurityGroupEgress": [
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "0",
            "IpProtocol": "udp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "-1",
            "IpProtocol": "icmp",
            "ToPort": "-1"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          }
        ],
        "SecurityGroupIngress": [
          {
            "FromPort": "3389",
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroup"
            },
            "ToPort": "3389"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "0",
            "IpProtocol": "udp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "-1",
            "IpProtocol": "icmp",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "BastionSecurityGroup": {
      "Properties": {
        "GroupDescription": "This is the security group for the bastion host",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "80",
            "IpProtocol": "tcp",
            "ToPort": "80"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "443",
            "IpProtocol": "tcp",
            "ToPort": "443"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "3389",
            "IpProtocol": "tcp",
            "ToPort": "3389"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "0",
            "IpProtocol": "tcp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "0",
            "IpProtocol": "udp",
            "ToPort": "65535"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "-1",
            "IpProtocol": "icmp",
            "ToPort": "-1"
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": "3389",
            "IpProtocol": "tcp",
            "ToPort": "3389"
          },
          {
            "CidrIp": "10.1.0.0/16",
            "FromPort": "-1",
            "IpProtocol": "icmp",
            "ToPort": "-1"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "BastionSecurityGroup"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },

    "PublicSubnetAZ1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.1.1.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PublicSubnetAZ1"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnetAZ1SubnetAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "DMZRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },

    "PrivateSubnetAZ1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "CidrBlock": "10.1.3.0/24",
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateSubnetAZ1"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetAZ1SubnetAssociation": {
      "Properties": {
        "RouteTableId": {
          "Ref": "InternalRouteTable"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    
    "DMZRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": "DMZRouteTable"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "InternalRouteTable": {
      "Properties": { 
        "Tags": [
          {
            "Key": "Name",
            "Value": "InternalRouteTable"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "NATRoute": {
      "DependsOn" : "InternetGatewayAttachment",        
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "AWSNat"
        },
        "RouteTableId": {
          "Ref": "InternalRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PublicRoute": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        },
        "RouteTableId": {
          "Ref": "DMZRouteTable"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "VPC": {
      "Properties": {
        "CidrBlock": "10.1.0.0/16",
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC"
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "InternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "InternetGateway"
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "InternetGatewayAttachment": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "AWSNat": {
      "DependsOn": "InternetGatewayAttachment",     
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "NatEip",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::NatGateway"
    },
    "NatEip": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    }
  }
}