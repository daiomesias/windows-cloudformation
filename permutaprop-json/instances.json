{
  "AWSTemplateFormatVersion" : "2010-09-09",
 "Description" : "Autoscalling with 2 ec2 windows server and IIS, ELB in the differents Availability Zones",
 "Parameters" : {
 "ImageID" : {
  "Type" : "String",
  "Description" : "Image for the instances: windows 2019 ami-0cb8c277ab5436fac, windows 2017 Standard SQL ami-09bd10a0fa6dfcd7b",
  "AllowedValues" : [ "ami-0cb8c277ab5436fac" , "ami-09bd10a0fa6dfcd7b" ],
  "Default" : "ami-0cb8c277ab5436fac"  
 },
 "InstanceType": {
   "Type" : "String",
   "Description": "Instance Type",
   "AllowedValues" : [ "t2.micro", "m5.large" ],
   "Default" : "t2.micro"  
},
"InstanceNumber" : {
"Type": "String",
"Description": "Number of instances for autoscaling",
"AllowedValues" : [ "1", "2" ],
"Default": "1"
},
"KeyPair" : {
"Type" : "AWS::EC2::KeyPair::KeyName",
"Description" : "KeyPair to access" , 
"AllowedPattern" : ".+",
"ConstraintDescription" : "KeyPair is mandatory, default  permutaprop-key", 
"Default" : "permutaprop-key"  
},
"VPCID": {
  "Description": "Select VPC used by ec2.",
  "Type": "AWS::EC2::VPC::Id"
},
"Subnets": {
  "Description": "Select 2 subnets used by ec2.",
  "Type": "List<AWS::EC2::Subnet::Id>"
},
"Subnetpre": {
  "ConstraintDescription": "Select just one prefered subnet",
  "Description": "Select just one prefered subnet",
  "Type": "String"
},
"SGID": {
  "Description": "Select Security Groups used by ec2",
  "Type": "List<AWS::EC2::SecurityGroup::Id>"
},
"ADID": {
  "ConstraintDescription": "Insert Directory ID inside Directory Service ",
  "Type": "String",
  "Default" : "d-9267035651"
},
"AZONE" : {
  "ConstraintDescription": "Insert Availability Zone",
  "Type": "String",
  "Default" : "us-west-2a"
  },
  "size" : {
    "ConstraintDescription": "Insert size for the ebs volume",
    "Type": "String",
    "Default" : "60"
    }
},
"Metadata": {
  "AWS::CloudFormation::Interface": {
    "ParameterGroups": [
      {
        "Label": {
          "default": "Network parameters"
        },
        "Parameters": [
          "VPCID",
          "Subnets",
          "SGID",
          "KeyPair"
        ]
      },
      {
        "Label": {
          "default": "Directory parameters"
        },
        "Parameters": [
          "SGID"
        ]
      }
    ]
  }
},
"Resources": {
  "Instances": {
    "Type": "AWS::AutoScaling::LaunchConfiguration",
    "Properties": {
      "InstanceType" : { "Ref" : "InstanceType" },
      "KeyName" : { "Ref" : "KeyPair" },
      "ImageId" : { "Ref" : "ImageID" },
      "BlockDeviceMappings" : [
        {
           "DeviceName" : "/dev/sda",
           "Ebs" : {
             "VolumeType" : "gp2",
             "Iops" : "16000",
             "DeleteOnTermination" : "false",
             "VolumeSize" :  { "Ref" : "size" }
            }
          }, 
          {
            "DeviceName" : "/dev/sdk",
            "NoDevice" : {}
          }
      ]
   },
      "UserData" : {
        "Fn::Base64" : {
            "Fn::Join" : [
                "",
                [
                    "<powershell>\n",
                    "# Install IIS and Web Management Tools.\n",
                    "Import-Module ServerManager\n",
                    "install-windowsfeature web-server, web-webserver\n",
                    "install-windowsfeature web-mgmt-tools\n",
                    "</powershell>\n",
                    "<powershell>\n",
                    "enter-pssession -ComputerName amznfsxefrpc7o9.corp.permutaprop.com -ConfigurationName FsxRemoteAdmin",
                    "</powershell>\n"
                ]
            ]
        }
      }
    }
  },
  "Scaling": {
    "Type": "AWS::AutoScaling::AutoScalingGroup",
    "Properties": {
      "AvailabilityZones": [ { "Ref": "AZONE" } ],
      "LaunchConfigurationName": { "Ref" : "Instances" },
      "MinSize": { "Ref": "InstanceNumber" },
      "MaxSize": { "Ref": "InstanceNumber" },
      "LoadBalancerNames": [ { "Ref": "Balancer" } ]
    }
  },
  "Balancer": {
    "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
    "Properties": {
      "AvailabilityZones": [ { "Ref": "AZONE" } ],
      "Listeners": [
        {
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "TCP",
          "InstanceProtocol" : "TCP"
        }
      ],
      "HealthCheck": {
        "Target": "TCP:80",
        "HealthyThreshold": "2",
        "UnhealthyThreshold": "2",
        "Interval": "10",
        "Timeout": "5"
        }  
      }    
    }
},

"Outputs": {
"InstanceDataOut": {
"Description" : "InstanceDataOut",
"Value" : {
  "Ref" : "Instances"
      }
    }
  }
}